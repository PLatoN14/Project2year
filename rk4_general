import matplotlib.pyplot as plt
import math

def runge_kutta_multiorder(f, x0, y_first, h, num_steps, m):
    x_values = [x0] #the x-values list
    y = [[0] for i in range(m)] # list of values of y: y[0] for y, y[1] for y' etc.
    for i in range(m):
        y[i][0] = y_first[i]

    for j in range(num_steps):
        new_step = [[0]*4 for i in range(m)]
        # adding first of 4 elements for each derivative in rk4 algorithm
        new_step[m-1][0] = h*func_reader(f, y, j, x_values)
        for ii in range(m-2, -1, -1):
            new_step[ii][0] = h * y[ii+1][j]
        #adding second step for each derivative in rk4 algorithm
        # in order to calculate f(xn + 1/2, yn+1/2, ...) we will change x_values, y, y'... temporary
        x_values[j] += h/2
        for iii in range(0, m):
            y[iii][j] += new_step[iii][0]/2
        new_step[m - 1][1] = h * func_reader(f, y, j, x_values)
        x_values[j] -= h / 2
        for iii in range(0, m):
            y[iii][j] -= new_step[iii][0] / 2

        for ii in range(m-2, -1, -1):
            new_step[ii][1] = h * (y[ii+1][j] + new_step[ii+1][0]/2)
        # adding third step for each derivative in rk4 algorithm
        # in order to calculate f(xn + 1/2, yn+1/2, ...) we will change x_values, y, y'... temporary
        x_values[j] += h/2
        for iii in range(0, m):
            y[iii][j] += new_step[iii][1]/2
        new_step[m - 1][2] = h * func_reader(f, y, j, x_values)
        x_values[j] -= h / 2
        for iii in range(0, m):
            y[iii][j] -= new_step[iii][1] / 2

        for ii in range(m-2, -1, -1):
            new_step[ii][2] = h * (y[ii+1][j] + new_step[ii+1][1]/2)

        #final step
        x_values[j] += h
        for iii in range(0, m):
            y[iii][j] += new_step[iii][2]
        new_step[m - 1][3] = h * func_reader(f, y, j, x_values)
        x_values[j] -= h
        for iii in range(0, m):
            y[iii][j] -= new_step[iii][2]

        for ii in range(m - 2, -1, -1):
            new_step[ii][3] = h * (y[ii + 1][j] + new_step[ii + 1][2])


        # finally adding new values
        x_values.append(x_values[-1] + h)
        for l in range(m):
            s = new_step[l][0] + 2*new_step[l][1] +2*new_step[l][2] + new_step[l][3]
            s = s/6
            y[l].append(y[l][-1] + s)

    return x_values, y[0]


def func_reader(f, y, n, x_values):
    ans = ''
    i = 0
    while i < len(f) - 1:
        k = 0
        if f[i] == 'e':
            ans += '(math.e)'
            i += 1
        elif f[i] == 'c':
            ans += str(math.cos(x_values[n]))
            if f[i+3] == '(':
                i += 6
            else:
                i += 4
        elif f[i] == 's':
            ans += str(math.sin(x_values[n]))
            if f[i+3] == '(':
                i += 6
            else:
                i += 4

        elif f[i] == 'l':
            ans += str(math.log(x_values[n]))
            if f[i+2] == '(':
                i += 5
            else:
                i += 3

        elif f[i] == '^':
            ans += '**'
            i += 1

        elif f[i] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
            if f[i + 1] in ['e', 'y', 'x', '(','c','s']:
                ans += f[i]
                ans += '*'
                i += 1
            else:
                ans += f[i]
                i += 1

        elif f[i] == 'x':
            ans += str(x_values[n])
            i += 1

        elif f[i] == 'y':
            k = i+1
            integer = ''
            while k < len(f):
                if f[k] in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
                    integer += f[k]
                    if k == len(f) - 1:
                        ans += str(y[int(integer)][n])
                    k += 1
                else:
                    if integer == '':
                        ans += str(y[0][n])
                    else:
                        ans += str(y[int(integer)][n])
                    break
            if k == len(f):
                break
            i = k

        else:
            ans += f[i]
            i += 1

        if i == len(f) - 1 and k != len(f):
            if f[-1] == 'x':
                ans += str(x_values[n])
            elif f[-1] == 'y':
                ans += str(y[0][n])
            else:
                ans += f[-1]
    if len(f) == 1:
        if f[-1] == 'x':
            ans += str(x_values[n])
        elif f[-1] == 'y':
            ans += str(y[0][n])
        else:
            ans += f[-1]

    return eval(ans)
'''
y = [[0, 1, 2], [1, 2, 3], [1, 3, 4]]
x = [1, 3, 5]
n = int(input())
f = input()
print(func_reader(f, y, n, x))
'''

print('Input the order of your differential equation: ')
m = int(input())
print('Input the right hand-side of your equation dy(m)/dx = ... ')
f = input()
print('Input the x0')
x0 = float(input())
print('Input the y(x0), y1(x0), y2(x0), ... ' )
y_first = list(map(float, input().split()))
print('Enter x to get y(x)')
x = float(input())
h = x - x0
num_steps = 1
while abs(h) > 0.01:
    h = h/10
    num_steps *= 10
x_values, y_values = runge_kutta_multiorder(f, x0, y_first, h, num_steps, m)
print(round(y_values[-1], 8))
plt.plot(x_values, y_values)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Solution of the Differential Equation')
plt.grid(True)
plt.show()
