import numpy as np
import matplotlib.pyplot as plt

# Input values
print("Input initial and final altitude:")
initial_altitude, final_altitude = map(float, input().split())
print("Input start and end time:")
start_time, end_time = map(float, input().split())
print("Input number of grid points:")
n = int(input())

h = (end_time - start_time) / n

# Get A - matrix represents the system of linear equations that approximates the second derivative of the altitude
A = np.zeros((n+1, n+1))  # full it with zeros in initial state
A[0, 0] = 1
A[n, n] = 1
for i in range(1, n):  # finite difference expressions - used to replace derivatives of y in the differential equation
    A[i, i-1] = 1  # setting matrix values (yi−1)−2*yi+(yi+1)=−gh^2,
    A[i, i] = -2
    A[i, i+1] = 1
print(A)

# Get b - represents the right-hand side of the system of linear equations and corresponds to the known terms in the differential equation
b = np.zeros(n+1)
b[1:-1] = -9.8 * h**2  # values in the vector b to represent the acceleration due to gravity (-9.8 * h**2)
b[-1] = final_altitude
print(b)

# Solving
y = np.linalg.solve(A, b)

t = np.linspace(start_time, end_time, n+1)

# Plotting
plt.figure(figsize=(10, 10))
plt.plot(t, y)
plt.plot(end_time, final_altitude, 'ro')
plt.xlabel('time (seconds)')
plt.ylabel('altitude (metres)')
plt.title('Solution')
plt.show()
